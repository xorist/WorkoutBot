import { StrictComponent, Optional } from "./types";
import { HookDomain } from "./hookDomain";
import { Context } from "./context";
declare type RenderTreeNode = {
    hookDomain: HookDomain;
    contextNodeObj?: {
        value: any;
        contextObject: Context;
    };
    parent: Optional<RenderTreeNode>;
    childrenContexts: {
        [key: string]: RenderTreeNode[];
    };
};
export declare class RenderTree {
    rootElement: Element;
    rootNode: StrictComponent;
    _baseRenderTreeNode: RenderTreeNode;
    constructor(rootElement: Element, rootNode: StrictComponent);
    _getContextVariable: (renderTreeNode: RenderTreeNode) => (context: Context) => any;
    _renderNodeChildren: (children: StrictComponent[], renderTreeNode: RenderTreeNode) => void;
    _renderNode: (nodeConstructor: StrictComponent, renderTreeNode: RenderTreeNode) => void;
    render: () => void;
}
export {};
