import { frag } from "./elements/frag";
const noop = () => { };
export function renderToText(node) {
    const domRepresentedProps = [
        "id",
        "class",
        "value",
        "checked",
        "selected",
        "disabled",
        "readonly",
        "hidden",
        "tabindex",
    ];
    function renderAttrValue(value) {
        return typeof value === "string" ? `"${value}"` : value;
    }
    const hooks = {
        rerender: noop,
        useState: (i) => [i, noop],
        useEffect: noop,
        useContext: () => undefined, // Context should REALLY be propatagated through rendering.
    };
    function renderNode(nodeConstructor) {
        const fn = typeof nodeConstructor === "function"
            ? nodeConstructor
            : () => nodeConstructor;
        let node = fn(hooks);
        if (typeof node === "function") {
            node = frag(node);
        }
        let html = "";
        if (!node) {
        }
        else if (node.type === "text") {
            html += node.text;
        }
        else if (typeof node === "function") {
            html += renderNode(() => frag(node));
        }
        else if (node.type === "fragment") {
            for (let child of node.children) {
                const childNode = child(hooks);
                if (childNode) {
                    html += renderNode(childNode);
                }
            }
        }
        else if (node.type === "context") {
            // TODO: Propagate context value.
            html += renderNode(node.child);
        }
        else {
            html = `<${node.tag}`;
            for (let key in node.props) {
                if (domRepresentedProps.indexOf(key) !== -1) {
                    const value = node.props[key];
                    if (value !== undefined) {
                        html += ` ${key}=${renderAttrValue(value)}`;
                    }
                }
            }
            if (node.children) {
                html += ">";
                for (let child of node.children) {
                    const childNode = child(hooks);
                    if (childNode) {
                        html += renderNode(childNode);
                    }
                }
                html += `</${node.tag}>`;
            }
            else {
                html += "/>";
            }
        }
        return html;
    }
    if (typeof node === "function") {
        return renderNode(node());
    }
    else {
        return renderNode(node);
    }
}
