import { Context } from "./context";
export declare type Optional<T> = T | undefined;
export declare type PermissiveOptional<T> = T | undefined | null | false | void;
export declare type PermissiveChild = PermissiveOptional<Component | OceanicNode | string>;
export declare type PermissiveChildren = PermissiveOptional<PermissiveChild[] | PermissiveChild>;
export interface Hooks {
    rerender: () => void;
    useState: UseStateHandler;
    useEffect: UseEffectHandler;
    useContext: UseContextHandler;
}
export declare type PermissiveNode = PermissiveOptional<OceanicNode | string>;
export declare type PermissiveComponent = ((hooks: Hooks) => PermissiveOptional<PermissiveNode | PermissiveComponent>) & {
    key?: string;
};
export declare type Component = PermissiveComponent;
export declare type StrictComponent = ((hooks: Hooks) => Optional<OceanicNode>) & {
    key?: string;
};
export declare type OceanicElementNode = {
    _oceanic: true;
    type: "element";
    tag: string;
    children: Optional<StrictComponent[]>;
    props: {
        [key: string]: any;
    };
};
export declare type OceanicFragmentNode = {
    _oceanic: true;
    type: "fragment";
    children: StrictComponent[];
};
export declare type OceanicContextNode = {
    _oceanic: true;
    type: "context";
    child: StrictComponent;
    value: unknown;
    contextObject: Context<unknown>;
};
export declare type OceanicTextNode = {
    _oceanic: true;
    type: "text";
    text: string;
};
export declare type OceanicNode = OceanicElementNode | OceanicFragmentNode | OceanicContextNode | OceanicTextNode;
export declare type UseStateHandler = <T>(initialState: T) => [T, (newState: T) => void];
export declare type UseEffectHandler = (create: () => (() => void) | void, deps: any[] | void | null) => void;
export declare type UseContextHandler = <T>(context: Context<T>) => T;
